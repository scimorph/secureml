[tool.poetry]
name = "secureml"
version = "0.3.0"
description = "A Python library for privacy-preserving machine learning"
authors = ["Enzo Paloschi Biondo <enzobiondo11@outlook.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/scimorph/secureml"
documentation = "https://secureml.readthedocs.io"
keywords = ["machine learning", "privacy", "security", "compliance", "gdpr"]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
numpy = "^2.3.0"
pandas = "^2.3.0"
opacus = "^1.5.4"
torch = "^2.7.1"
# tensorflow-privacy removed and handled via isolated environment
scikit-learn = "^1.7.0"
spacy = "^3.8.7"
faker = "^37.0.1"
pyyaml = "6.0.2"
flwr = { extras = ["simulation"], version = "^1.18.0" }
sdv = "*"
jinja2 = "^3.1.4"
matplotlib = "^3.10.3"
click = "^8.1.8"
pyarrow = "^19.0.1"
sphinx-rtd-theme = "^1.3.0"
pydantic = "^2.11.3"
polars = "^1.30.0"
weasyprint = {version = "^64.1", optional = true}
hvac = {version = "^1.1.1", optional = true}

[tool.poetry.extras]
pdf = ["weasyprint"]
vault = ["hvac"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
hypothesis = "^6.82.0"
black = "^24.3.0"
isort = "^5.12.0"
mypy = "^1.5.0"
sphinx = "^7.1.0"

[tool.poetry.scripts]
secureml = "secureml.cli:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Set the maximum line length. The default is 88, which is the same as Black.
line-length = 120
target-version = "py311"

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
   ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "W",   # pycodestyle (warnings)
    "N",   # pep8-naming
    "I",   # isort (import sorting)
    "UP",  # pyupgrade (modernize Python code)
    "B",   # flake8-bugbear (finds potential bugs)
    "C4",  # flake8-comprehensions (encourages more Pythonic comprehensions)
    "DTZ", # flake8-datetimez
    "SIM", # flake8-simplify (simplifies code)
    "TID", # flake8-tidy-imports (better import structuring)
    "RUF", # ruff-specific rules
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["secureml"]

# Allow unused variables in `__init__.py` files, which is common.
# Also, relax rules for test files (e.g., allow `assert` and magic values).
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "F841", "PLR2004"] # Allow `assert` and unused variables in tests

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true 